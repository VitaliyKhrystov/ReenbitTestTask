{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nexport let AppComponent = class AppComponent {\n  constructor(fileService) {\n    this.fileService = fileService;\n    this.fileType = environment.fileType == null ? '' : environment.fileType;\n    this.status = \"\";\n    this.myForm = new FormGroup({\n      \"userEmail\": new FormControl(\"\", [Validators.required, Validators.email]),\n      \"userFile\": new FormControl(null, [Validators.required, this.requiredFileType])\n    });\n  }\n  onChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.file = file;\n    }\n  }\n  send() {\n    if (this.file && this.myForm.value.userEmail) {\n      const formData = new FormData();\n      formData.append('email', this.myForm.value.userEmail);\n      formData.append('file', this.file, this.file.name);\n      this.fileService.upload(formData).subscribe({\n        next: status => {\n          console.log(`Status: ${status}. File is successfully uploaded!`);\n          this.status = \"File is successfully uploaded!\";\n        },\n        error: err => {\n          console.log(err);\n          this.status = \"File isn't uploaded!\";\n        }\n      });\n      this.myForm = new FormGroup({\n        \"userEmail\": new FormControl(),\n        \"userFile\": new FormControl()\n      });\n      setTimeout(() => {\n        this.status = \"\";\n      }, 3000);\n    }\n  }\n  requiredFileType(control) {\n    const file = control.value;\n    let pattern = \"[^\\s]+(.*?).(\" + environment.fileType + \")$\";\n    const regex = new RegExp(pattern);\n    if (file) {\n      if (!regex.test(file)) {\n        return {\n          \"userFile\": true\n        };\n      }\n    }\n    ;\n    return null;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","environment","AppComponent","constructor","fileService","fileType","status","myForm","required","email","requiredFileType","onChange","event","file","target","files","send","value","userEmail","formData","FormData","append","name","upload","subscribe","next","console","log","error","err","setTimeout","control","pattern","regex","RegExp","test","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Мои документы\\Course .Net\\Test Task for job\\Reenbit\\UIapp\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { FileService } from 'src/Services/file.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  myForm: FormGroup;\n  fileType: string = environment.fileType == null ? '' : environment.fileType;\n  file?: File;\n  status: string = \"\";\n\n    constructor(private fileService: FileService){\n        this.myForm = new FormGroup({\n          \"userEmail\": new FormControl(\"\", [\n                                Validators.required,\n                                Validators.email\n                            ]),\n          \"userFile\": new FormControl(null, [\n                                Validators.required,\n                                this.requiredFileType])\n        });\n    }\n\n\n  onChange(event:any) {\n    const file: File = event.target.files[0];\n    if (file) {\n      this.file = file;\n    }\n  }\n\n  send(){\n    if (this.file && this.myForm.value.userEmail) {\n      const formData = new FormData();\n      formData.append('email', this.myForm.value.userEmail);\n      formData.append('file', this.file, this.file.name);\n\n      this.fileService.upload(formData).subscribe({\n        next: (status) => {\n          console.log(`Status: ${status}. File is successfully uploaded!`);\n          this.status = \"File is successfully uploaded!\"\n        },\n        error: err => {\n          console.log(err);\n          this.status = \"File isn't uploaded!\"\n        }\n      });\n      this.myForm = new FormGroup({\n          \"userEmail\": new FormControl(),\n          \"userFile\": new FormControl()\n      });\n      setTimeout(() => {\n        this.status = \"\"\n      }, 3000);\n\n    }\n  }\n\n  requiredFileType (control: FormControl): {[s:string]:boolean}|null {\n    const file = control.value;\n    let pattern = \"[^\\s]+(.*?).(\" + environment.fileType + \")$\";\n    const regex = new RegExp(pattern);\n    if ( file ) {\n      if ( !regex.test(file)) {\n        return {\"userFile\": true};\n      }\n    };\n    return null;\n\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,WAAW,QAAQ,8BAA8B;AAOnD,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOrBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAJjC,KAAAC,QAAQ,GAAWJ,WAAW,CAACI,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAGJ,WAAW,CAACI,QAAQ;IAE3E,KAAAC,MAAM,GAAW,EAAE;IAGb,IAAI,CAACC,MAAM,GAAG,IAAIR,SAAS,CAAC;MAC1B,WAAW,EAAE,IAAID,WAAW,CAAC,EAAE,EAAE,CACXE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACS,KAAK,CACnB,CAAC;MACpB,UAAU,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CACZE,UAAU,CAACQ,QAAQ,EACnB,IAAI,CAACE,gBAAgB,CAAC;KAC7C,CAAC;EACN;EAGFC,QAAQA,CAACC,KAAS;IAChB,MAAMC,IAAI,GAASD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxC,IAAIF,IAAI,EAAE;MACR,IAAI,CAACA,IAAI,GAAGA,IAAI;;EAEpB;EAEAG,IAAIA,CAAA;IACF,IAAI,IAAI,CAACH,IAAI,IAAI,IAAI,CAACN,MAAM,CAACU,KAAK,CAACC,SAAS,EAAE;MAC5C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACd,MAAM,CAACU,KAAK,CAACC,SAAS,CAAC;MACrDC,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACR,IAAI,EAAE,IAAI,CAACA,IAAI,CAACS,IAAI,CAAC;MAElD,IAAI,CAAClB,WAAW,CAACmB,MAAM,CAACJ,QAAQ,CAAC,CAACK,SAAS,CAAC;QAC1CC,IAAI,EAAGnB,MAAM,IAAI;UACfoB,OAAO,CAACC,GAAG,CAAC,WAAWrB,MAAM,kCAAkC,CAAC;UAChE,IAAI,CAACA,MAAM,GAAG,gCAAgC;QAChD,CAAC;QACDsB,KAAK,EAAEC,GAAG,IAAG;UACXH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;UAChB,IAAI,CAACvB,MAAM,GAAG,sBAAsB;QACtC;OACD,CAAC;MACF,IAAI,CAACC,MAAM,GAAG,IAAIR,SAAS,CAAC;QACxB,WAAW,EAAE,IAAID,WAAW,EAAE;QAC9B,UAAU,EAAE,IAAIA,WAAW;OAC9B,CAAC;MACFgC,UAAU,CAAC,MAAK;QACd,IAAI,CAACxB,MAAM,GAAG,EAAE;MAClB,CAAC,EAAE,IAAI,CAAC;;EAGZ;EAEAI,gBAAgBA,CAAEqB,OAAoB;IACpC,MAAMlB,IAAI,GAAGkB,OAAO,CAACd,KAAK;IAC1B,IAAIe,OAAO,GAAG,eAAe,GAAG/B,WAAW,CAACI,QAAQ,GAAG,IAAI;IAC3D,MAAM4B,KAAK,GAAG,IAAIC,MAAM,CAACF,OAAO,CAAC;IACjC,IAAKnB,IAAI,EAAG;MACV,IAAK,CAACoB,KAAK,CAACE,IAAI,CAACtB,IAAI,CAAC,EAAE;QACtB,OAAO;UAAC,UAAU,EAAE;QAAI,CAAC;;;IAE5B;IACD,OAAO,IAAI;EAEb;CACD;AAlEYX,YAAY,GAAAkC,UAAA,EALxBvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWrC,YAAY,CAkExB"},"metadata":{},"sourceType":"module","externalDependencies":[]}